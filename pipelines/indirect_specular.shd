include "pipelines/common.glsl"


common [[
	layout(std140, binding = 4) uniform Drawcall {
		vec4 u_pos;
		vec4 u_rot;
		vec4 u_half_extents;
	};
]]

------------------

vertex_shader [[
	layout(location = 0) in vec3 a_position;
	
	void main()
	{
		vec3 pos = rotateByQuat(u_rot, u_half_extents.xyz * a_position);
		pos += u_pos.xyz;
		gl_Position = Global.projection * Global.view * vec4(pos, 1);
	}
]]

---------------------


fragment_shader [[
	layout(location = 0) out vec4 o_color;
	
	layout (binding=0) uniform sampler2D u_gbuffer0;
	layout (binding=1) uniform sampler2D u_gbuffer1;
	layout (binding=2) uniform sampler2D u_gbuffer2;
	layout (binding=3) uniform sampler2D u_gbuffer_depth;

	layout (binding=4) uniform samplerCube u_radiancemap;

	void main()
	{
		vec2 screen_uv = gl_FragCoord.xy / Global.framebuffer_size;

		float ndc_depth;
		Surface surface = unpackSurface(screen_uv, u_gbuffer0, u_gbuffer1, u_gbuffer2, u_gbuffer_depth, ndc_depth);
		o_color.rgb = computeIndirectSpecular(u_radiancemap, surface);
		
		vec4 inv_rot = u_rot;
		inv_rot.w = -inv_rot.w;
		vec3 lpos = abs(rotateByQuat(inv_rot, surface.wpos - u_pos.xyz) / u_half_extents.xyz);

		//if (any(greaterThan(abs(lpos), u_half_extents))) discard;
		float m = saturate(max(max(lpos.x, lpos.y), lpos.z) * 2 - 0.5);
		m = 1 - m * m;
	
		o_color.rgb *= m * Global.light_indirect_intensity;

		o_color.a = m;
	}
]]